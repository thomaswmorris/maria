{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0",
   "metadata": {},
   "source": [
    "# Custom map simulations\n",
    "\n",
    "In this tutorial we will build a simulation from scratch."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1",
   "metadata": {},
   "source": [
    "We start by defining a `Band` that will determine our array's sensitivity to different spectra. We then generate an array by specifying a field of view, which will be populated by evenly-spaced beams of the given band."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import maria\n",
    "from maria.instrument import Band\n",
    "\n",
    "f090 = Band(\n",
    "    center=90e9,  # in Hz\n",
    "    width=20e9,  # in Hz\n",
    "    NET_RJ=40e-6,  # in K sqrt(s)\n",
    "    knee=1e0,    # in Hz\n",
    "    gain_error=5e-2)\n",
    "\n",
    "f150 = Band(\n",
    "    center=150e9, \n",
    "    width=30e9, \n",
    "    NET_RJ=60e-6, \n",
    "    knee=1e0, \n",
    "    gain_error=5e-2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3",
   "metadata": {},
   "source": [
    "We next define an array config, which specifies how detectors will be distributed on the focal plane. In this case, we supply our two bands as the `bands` argument, which will generate an array of multichroic detectors (for monochroic detectors, we would supply e.g. `\"bands\": [f090]`). The resolution of each detector is determined by frequency of the band and the `primary_size` parameter. The number of detectors is determined by filling up the specified `field_of_view` with detector beams, with a relative spacing determined by the `beam_spacing` parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4",
   "metadata": {},
   "outputs": [],
   "source": [
    "array = {\"field_of_view\": 0.5, \n",
    "         \"beam_spacing\": 1.5,\n",
    "         \"primary_size\": 25, \n",
    "         \"bands\": [f090, f150]}\n",
    "\n",
    "instrument = maria.get_instrument(array=array)\n",
    "\n",
    "print(instrument)\n",
    "instrument.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5",
   "metadata": {},
   "source": [
    "The `Site` defines the observing location, as well as the weather conditions. ``maria`` knows about a bunch of astronomical observing sites (to see them, run `print(maria.site_data)`); we can instantiate them using the `get_site` function. We can modify the site by passing kwargs to the ``get_site`` function, like changing its `altitude` (which will affect the vertical profile of different atmospheric parameters). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6",
   "metadata": {},
   "outputs": [],
   "source": [
    "site = maria.get_site(\"llano_de_chajnantor\", altitude=5065)\n",
    "\n",
    "print(site)\n",
    "site.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7",
   "metadata": {},
   "source": [
    "Here the `fetch` function downloads a map to the path `map_filename`, but `map_filename` can be any `.h5` or `.fits` file of an image that corresponds to the `maria` map convention (see [Maps](https://thomaswmorris.com/maria/usage/inputs/maps)). Additional kwargs added to the `maria.map.load` overwrite the metadata of the loaded map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from maria.io import fetch\n",
    "\n",
    "map_filename = fetch(\"maps/cluster1.fits\")\n",
    "\n",
    "input_map = maria.map.load(\n",
    "    filename=map_filename,\n",
    "    nu=150e9,\n",
    "    center=(291.156, -31.23))\n",
    "input_map.data *= 5e1 \n",
    "\n",
    "print(input_map)\n",
    "input_map.to(\"K_RJ\").plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9",
   "metadata": {},
   "source": [
    "We plan an observation using the `Planner`, which ensures that a given `target` as seen by a given `site` will be high enough above the horizon."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10",
   "metadata": {},
   "outputs": [],
   "source": [
    "from maria import Planner\n",
    "\n",
    "planner = Planner(start_time=\"2024-08-06T03:00:00\",\n",
    "                  target=input_map, \n",
    "                  site=site, \n",
    "                  el_bounds=(40, 90))\n",
    "\n",
    "plan = planner.generate_plan(total_duration=1200,  # in seconds\n",
    "                             scan_pattern=\"daisy\",\n",
    "                             scan_options={\"radius\": input_map.width.deg / 3},\n",
    "                             sample_rate=50)\n",
    "\n",
    "print(plan)\n",
    "plan.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.scatter(0,0)\n",
    "plt.scatter(2,2)\n",
    "\n",
    "plt.annotate(xy=(0, 0), xycoords='data', xytext=(0.1, 0.1), textcoords=\"axes fraction\", text=\"abc\", bbox={\"boxstyle\": \"round,pad=0.3\", \"fc\": \"w\", \"ec\": \"k\", \"alpha\": 0.5, \"lw\": 1}, )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12",
   "metadata": {},
   "outputs": [],
   "source": [
    "sim = maria.Simulation(\n",
    "    instrument,\n",
    "    plan=plan,\n",
    "    site=site,\n",
    "    atmosphere=\"2d\",\n",
    "    atmosphere_kwargs={\"weather\": {\"pwv\": 0.5}},\n",
    "    map=input_map)\n",
    "\n",
    "print(sim)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13",
   "metadata": {},
   "source": [
    "We run the simulation, which spits out a `TOD` object (which stands for time-ordered data). We can then plot the `TOD`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14",
   "metadata": {},
   "outputs": [],
   "source": [
    "tod = sim.run()\n",
    "\n",
    "print(tod)\n",
    "tod.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15",
   "metadata": {},
   "source": [
    "We can then map the `TOD` using the built-in mapper."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16",
   "metadata": {},
   "outputs": [],
   "source": [
    "from maria.mappers import BinMapper\n",
    "\n",
    "mapper = BinMapper(\n",
    "    center=input_map.center,\n",
    "    frame=\"ra_dec\",\n",
    "    width=input_map.width,\n",
    "    height=input_map.height,\n",
    "    resolution=input_map.width / 256,\n",
    "    tod_preprocessing={\n",
    "        \"window\": {\"name\": \"tukey\", \"kwargs\": {\"alpha\": 0.1}},\n",
    "        \"remove_spline\": {\"knot_spacing\": 30, \"remove_el_gradient\": True},\n",
    "        \"remove_modes\": {\"modes_to_remove\": [0]},\n",
    "    },\n",
    "    map_postprocessing={\n",
    "        \"gaussian_filter\": {\"sigma\": 1},\n",
    "    },\n",
    "    units=\"mK_RJ\",\n",
    ")\n",
    "\n",
    "mapper.add_tods(tod)\n",
    "\n",
    "output_map = mapper.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17",
   "metadata": {},
   "source": [
    "We can see the recovered map with"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18",
   "metadata": {},
   "outputs": [],
   "source": [
    "output_map.plot(nu_index=[0, 1])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  },
  "vscode": {
   "interpreter": {
    "hash": "b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
